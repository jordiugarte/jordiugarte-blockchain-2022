{"version":3,"sources":["ethereum/web3.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialize","ethereum","window","Boolean","isMetaMask","isMetamaskInstalled","alert","web3","Web3","connectWallet","request","method","code","message","App","useState","contract","setContract","address","setAddress","quantity","setQuantity","balance","setBalance","addition","setAddition","contractAddress","setContractAddress","contractBalance","setContractBalance","useEffect","loadBlockchainData","abi","contractMain","contractDeployed","eth","Contract","getSmartContractAddress","buy","getAccounts","accounts","methods","buyTokens","Number","send","from","value","utils","toWei","getBalance","balanceAccount","getSupply","getTotalSupply","increment","generetaTokens","getContractAddress","className","onClick","id","type","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.05eaba88.chunk.js","sourcesContent":["import { async } from \"q\";\nimport Web3 from \"web3\";\n\nconst isMetamaskInstalled = () => {\n    const { ethereum } = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n}\n\nexport const initialize = () => {\n    if (isMetamaskInstalled()) {\n        alert(\"Metamask is installed\");\n        window.web3 = new Web3(window.ethereum);\n    } else {\n        alert(\"Metamask is not installed\");\n    }\n}\n\nexport const connectWallet = async () => {\n    try {\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n        alert(\"Wallet connected.\");\n    } catch(e) {\n        if (e.code === 4001) {\n            alert(\"Error connecting.\");\n        } else {\n            alert(e.message);\n        }\n    }\n    \n}","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {connectWallet, initialize} from \"./ethereum/web3\";\nimport contractMain from \"./ethereum/abis/Main.json\"\n\nfunction App() {\n\n  const [contract, setContract] = useState<any>('');\n\n  const [address, setAddress] = useState<any>('');\n  const [quantity, setQuantity] = useState<any>(0);\n  const [balance, setBalance] = useState<any>(0);\n  const [addition, setAddition] = useState<any>(0);\n  const [contractAddress, setContractAddress] = useState<any>('');\n\n  const [contractBalance, setContractBalance] = useState<any>('');\n\n  useEffect( () => {\n    // @ts-ignore\n    if(window.web3) {\n      initialize();\n      loadBlockchainData();\n    }\n  }, [])\n\n  const loadBlockchainData = async () => {\n    // @ts-ignore\n    const Web3 = window.web3;\n    const abi = contractMain.abi;\n    const contractDeployed = new Web3.eth.Contract(abi, '0x1403FB1fF13875035F791D7EbB922E1267Ef0f84');\n    setContract(contractDeployed);\n    getSmartContractAddress();\n    //getSupply();\n  }\n\n  const buy = async () => {\n    // @ts-ignore\n    const Web3 = window.web3;\n    const accounts = await Web3.eth.getAccounts()\n    await contract.methods.buyTokens(address, Number(quantity)).send({\n      from: accounts[0],\n      value: Web3.utils.toWei(quantity, \"ether\")\n    })\n  }\n\n  const getBalance = async () => {\n    // @ts-ignore\n    const Web3 = window.web3;\n    const abi = contract.abi;\n    const balance = await contract.methods.balanceAccount(address);\n    setBalance(balance)\n  }\n\n  const getSupply = async () => {\n    // @ts-ignore\n    const contractBalance = await Number(contract.methods.getTotalSupply());\n    setContractBalance(contractBalance);\n  }\n\n  const increment = async () => {\n    // @ts-ignore\n    const Web3 = window.web3;\n    const abi = contract.abi;\n    contract.methods.generetaTokens(addition);\n  }\n\nconst getSmartContractAddress = async () => {\n  const contractAddress = await contract.methods.getContractAddress();\n  setContractAddress(contractAddress);\n\n}\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => connectWallet()} className=\"btn btn-success\">Connect</button>\n        <div>\n          <h1>Comprar tokens</h1>\n          <label>\n            Direcci칩n de destino\n            <input id='addressField' type=\"text\" value={address} onChange={ (event) => { setAddress(event.target.value) } } />\n          </label>\n        </div>\n        <div>\n          <label>\n            Cantidad de tokens a comprar (1 token = 1 ether)\n            <input id='quantityField' type=\"text\" value={quantity} onChange={ (event) => { setQuantity(event.target.value) } } />\n          </label>\n        </div>\n        <button onClick={() => buy()} className=\"btn btn-success\">Comprar tokens</button>\n\n        <div>\n          <h1>Balance</h1>\n          <label>\n            Direcci칩n del usuario\n            <input id='addressField' type=\"text\" value={address} onChange={ (event) => { setAddress(event.target.value) } } />\n          </label>\n          <p>BALANCE: {balance}</p>\n        </div>\n        <button onClick={getBalance}>Balance de usuario</button>\n        <div>\n          <h1>Balance total de tokens del Smart Contract</h1>\n          <button onClick={getSupply}>Obtener balance</button>\n        </div>\n        <p>CONTRACT BALANCE: {contractBalance}</p>\n\n        <div>\n          <h1>A침adir nuevos tokens</h1>\n          <input id='addressField' type=\"text\" value={addition} onChange={ (event) => { setAddition(event.target.value) } } />\n          <button onClick={increment}>A침adir tokens</button>\n        </div>\n\n        <div>\n          <h1>Direccion del Smart Contract en Rinkeby</h1>\n          <p>{contractAddress}</p>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}