{"version":3,"sources":["ethereum/web3.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialize","ethereum","window","Boolean","isMetaMask","isMetamaskInstalled","alert","web3","Web3","connectWallet","request","method","code","message","App","useState","contractDeployed","setContract","address","setAddress","quantity","setQuantity","value","setValue","userBalance","setUserBalance","addressBalance","setAddressBalance","balance","setBalance","tokens","setTokens","contractAddress","setContractAddress","tokenprice","setTokenPrice","useEffect","loadBlockchainData","abi","contractMain","eth","Contract","methods","getContractAddress","call","buy","getAccounts","accounts","buyTokens","send","from","utils","toWei","getUserBalance","balanceAccount","usrBalance","getBalance","getTotalSupply","increment","generetaTokens","getTokens","tokenBalance","getTokenPrice","priceTokens","className","id","Button","onClick","variant","Form","Label","Control","type","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5c1ef1ba.chunk.js","sourcesContent":["import { async } from \"q\";\nimport Web3 from \"web3\";\n\nconst isMetamaskInstalled = () => {\n    const { ethereum } = window;\n    return Boolean(ethereum && ethereum.isMetaMask);\n}\n\nexport const initialize = () => {\n    if (isMetamaskInstalled()) {\n        alert(\"Metamask is installed\");\n        window.web3 = new Web3(window.ethereum);\n    } else {\n        alert(\"Metamask is not installed\");\n    }\n}\n\nexport const connectWallet = async () => {\n    try {\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n        alert(\"Wallet connected.\");\n    } catch(e) {\n        if (e.code === 4001) {\n            alert(\"Error connecting.\");\n        } else {\n            alert(e.message);\n        }\n    }\n    \n}","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {connectWallet, initialize} from \"./ethereum/web3\";\nimport contractMain from \"./ethereum/abis/Main.json\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\n\nfunction App() {\n\n  const [contractDeployed, setContract] = useState<any>('');\n\n  const [address, setAddress] = useState<any>('');\n  const [quantity, setQuantity] = useState<any>('');\n  const [value, setValue] = useState<any>('');\n\n  const [userBalance, setUserBalance] = useState<any>('');\n  const [addressBalance, setAddressBalance] = useState<any>('');\n\n  const [balance, setBalance] = useState<any>(0);\n  const [tokens, setTokens] = useState<any>('');\n\n  const [contractAddress, setContractAddress] = useState<any>('');\n  const [tokenprice, setTokenPrice] = useState<any>('');\n\n\n\n  useEffect( () => {\n      // @ts-ignore\n      if(window.web3) {\n          initialize();\n          loadBlockchainData();\n      }\n  }, [])\n\n  const loadBlockchainData = async () => {\n      // @ts-ignore\n      const Web3 = window.web3;\n      const abi = contractMain.abi;\n      const contractDeployed = await new Web3.eth.Contract(abi, '0x582c5592e44775209ad4529479c0e0e66c576e2b');\n      setContractAddress(await contractDeployed.methods.getContractAddress().call());\n      //getBalance();\n      setContract(contractDeployed);\n  }\n\n  const buy = async () => {\n      // @ts-ignore\n      const Web3 = window.web3;\n      const accounts = await Web3.eth.getAccounts()\n      await contractDeployed.methods.buyTokens(address,quantity ).send({\n          from: accounts[0],\n          value: Web3.utils.toWei(value, \"ether\")\n      })\n      await getContractAddress()\n  }\n\n  const getUserBalance = async () => {\n    // @ts-ignore\n    const Web3 = window.web3;\n    const accounts = await Web3.eth.getAccounts()\n    const usrBalance= await contractDeployed.methods.balanceAccount(addressBalance).call()\n    setUserBalance(usrBalance)\n  }\n\n\n\n  const getBalance = async () => {\n      // @ts-ignore\n      const balance = await contractDeployed.methods.getTotalSupply().call();\n      setBalance(balance)\n  }\n\n  const getContractAddress = async () => {\n      const address = await contractDeployed.methods.getContractAddress().call();\n      setContractAddress(address);\n  }\n\n  const increment = async () => {\n      // @ts-ignore\n      const Web3 = window.web3;\n      const accounts = await Web3.eth.getAccounts()\n      await contractDeployed.methods.generetaTokens(tokens).send({\n          from: accounts[0]\n      })\n      await getTokens(); \n  }\n  const getTokens = async () => {\n      const tokenBalance = await contractDeployed.methods.getTotalSupply().call();\n      setTokens(tokenBalance)\n\n  }\n  const getTokenPrice = async () => {\n      // @ts-ignore\n      const tokenprice = await contractDeployed.methods.priceTokens(quantity).call()\n      setTokenPrice(tokenprice)\n\n  }\n\n  return (\n      <div className=\"App\" id=\"grad1\">\n        <h1>TURBO COIN</h1>\n        <Button onClick={() => connectWallet()} className=\"btn btn-info\" variant='success'>Connect Metamask Wallet</Button>\n        <div className='container'>\n            <p>Contract Address: {contractAddress}</p>\n        </div>  \n        <div className='container'>\n            <h2>Comprar monedas</h2>\n            <div>\n                <Form.Label>Destino</Form.Label>\n                <Form.Control id='addressField' type=\"text\" value={address} onChange={ (event) => { setAddress(event.target.value) } } />\n            </div>\n            <div>\n                <Form.Label>Cantidad de tokens (1 token = 1 ether)</Form.Label>\n                <Form.Control id='quantityField' type=\"number\" value={quantity} onChange={ (event) => { setQuantity(event.target.value) } } />\n            </div>\n            <div>\n                <Form.Label>Valor</Form.Label>\n                <Form.Control id='quantityField' type=\"text\" value={value} onChange={ (event) => { setValue(event.target.value) } } />\n            </div>\n            <Button onClick={() => buy()} className=\"btn btn-info\" variant='success'>Buy</Button>\n        </div>\n\n        <div className='container'>\n            <p>Monto de contrato: {balance} TBC</p>\n            <Button onClick={getBalance} className=\"btn btn-info\" variant='success'>Balance actual</Button>            \n        </div>\n        \n        <div className='container'>\n            <h2>Get User Balance</h2>\n            <Form.Label>Dirección de cuenta</Form.Label>\n            <Form.Control id='addressField' type=\"text\" value={addressBalance} onChange={ (event) => { setAddressBalance(event.target.value) } } />  \n            <button onClick={() => getUserBalance()} className=\"btn btn-info\">User Balance</button>\n            <p>Balance: {userBalance}</p>\n        </div>\n\n        <div className='container'>\n            <h2>Create new Tokens</h2>\n            <Form.Control id='addressField' type=\"number\" value={tokens} onChange={ (event) => { setTokens(event.target.value) } } />\n            <Button onClick={increment} className=\"btn btn-info\" variant='success'>Create tokens</Button>\n        </div>\n        <div className='container'>\n            <h2>Calcular precio de tokens</h2>\n            <Form.Control id='addressField' type=\"number\" value={quantity} onChange={ (event) => { setQuantity(event.target.value) } } />\n            <Button onClick={getTokenPrice} className=\"btn btn-info\" variant='success'>Get price</Button>\n            <p>Precio: {tokenprice}</p>\n        </div>\n      </div>\n\n\n\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}